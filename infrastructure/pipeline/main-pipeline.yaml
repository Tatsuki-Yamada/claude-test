AWSTemplateFormatVersion: '2010-09-09'
Description: 'S3 Photo Gallery CI/CD Pipeline - Optimized Architecture'

Parameters:
  GitHubOwner:
    Type: String
    Default: Tatsuki-Yamada
    Description: GitHub repository owner
  
  GitHubRepo:
    Type: String
    Default: claude-test
    Description: GitHub repository name
  
  GitHubBranch:
    Type: String
    Default: main
    Description: GitHub repository branch
  
  GitHubToken:
    Type: String
    NoEcho: true
    Description: GitHub OAuth token
  
  PrerequisitesStackName:
    Type: String
    Default: s3-photo-gallery-prerequisites
    Description: Name of the prerequisite resources CloudFormation stack

Resources:
  # CodeBuild project for building React app only - no infrastructure deployment
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${AWS::StackName}-build'
      Description: 'Build the S3 Photo Gallery React app'
      ServiceRole: 
        Fn::ImportValue: !Sub '${PrerequisitesStackName}-CodeBuildServiceRoleArn'
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        PrivilegedMode: false
        EnvironmentVariables:
          - Name: REACT_APP_S3_BUCKET_NAME
            Value: !Sub '${AWS::StackName}-photos-${AWS::AccountId}'
            Type: PLAINTEXT
          - Name: REACT_APP_AWS_REGION
            Value: !Ref AWS::Region
            Type: PLAINTEXT
      Source:
        Type: CODEPIPELINE
        BuildSpec: infrastructure/buildspecs/build-react-app.yml
      TimeoutInMinutes: 10

  # CloudFormation service role - will be used for direct CloudFormation actions in pipeline
  # Role is imported from prerequisites stack

  # CodePipeline
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub '${AWS::StackName}-pipeline'
      RoleArn: 
        Fn::ImportValue: !Sub '${PrerequisitesStackName}-CodePipelineServiceRoleArn'
      ArtifactStore:
        Type: S3
        Location: 
          Fn::ImportValue: !Sub '${PrerequisitesStackName}-ArtifactBucketName'
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: SourceCode
        
        - Name: DeployInfrastructure
          Actions:
            # S3リソースをデプロイ (CloudFormation直接呼び出し)
            - Name: DeployS3Resources
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: 
                  Fn::ImportValue: !Sub '${PrerequisitesStackName}-CloudFormationServiceRoleArn'
                StackName: !Sub '${AWS::StackName}-s3-resources'
                TemplatePath: SourceCode::infrastructure/resources/s3-resources.yaml
                ParameterOverrides: !Sub |
                  {
                    "StackName": "${AWS::StackName}"
                  }
              InputArtifacts:
                - Name: SourceCode
              RunOrder: 1
            
            # ホスティングリソースをデプロイ (CloudFormation直接呼び出し)
            - Name: DeployHostingResources
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_NAMED_IAM
                RoleArn: 
                  Fn::ImportValue: !Sub '${PrerequisitesStackName}-CloudFormationServiceRoleArn'
                StackName: !Sub '${AWS::StackName}-hosting-resources'
                TemplatePath: SourceCode::infrastructure/resources/hosting-resources.yaml
                ParameterOverrides: !Sub |
                  {
                    "StackName": "${AWS::StackName}"
                  }
              InputArtifacts:
                - Name: SourceCode
              RunOrder: 2
        
        - Name: BuildAndDeploy
          Actions:
            - Name: BuildReactApp
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref BuildProject
                EnvironmentVariables: !Sub |
                  [
                    {
                      "name": "REACT_APP_S3_BUCKET_NAME",
                      "value": "${AWS::StackName}-photos-${AWS::AccountId}",
                      "type": "PLAINTEXT"
                    },
                    {
                      "name": "REACT_APP_AWS_REGION",
                      "value": "${AWS::Region}",
                      "type": "PLAINTEXT"
                    }
                  ]
              InputArtifacts:
                - Name: SourceCode
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
            
            - Name: DeployToS3
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                BucketName: !Sub '${AWS::StackName}-website-${AWS::AccountId}'
                Extract: true
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 2
            
            # CloudFrontのキャッシュを無効化
            - Name: InvalidateCloudFrontCache
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref InvalidateCacheProject
              InputArtifacts:
                - Name: SourceCode
              RunOrder: 3

  # CloudFrontキャッシュ無効化用のプロジェクト
  InvalidateCacheProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${AWS::StackName}-invalidate-cache'
      Description: 'Invalidate CloudFront cache after deployment'
      ServiceRole: 
        Fn::ImportValue: !Sub '${PrerequisitesStackName}-CodeBuildServiceRoleArn'
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        PrivilegedMode: false
        EnvironmentVariables:
          - Name: STACK_NAME
            Value: !Ref AWS::StackName
            Type: PLAINTEXT
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            build:
              commands:
                - echo "Retrieving CloudFront distribution ID..."
                - export CLOUDFRONT_DIST_ID=$(aws cloudformation describe-stacks --stack-name ${STACK_NAME}-hosting-resources --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDistributionId'].OutputValue" --output text)
                - echo "Retrieved CloudFront distribution ID: $CLOUDFRONT_DIST_ID"
                - echo "Creating CloudFront invalidation..."
                - aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DIST_ID --paths "/*"
            post_build:
              commands:
                - echo "CloudFront cache invalidation complete"
      TimeoutInMinutes: 10

Outputs:
  PipelineUrl:
    Description: URL to the CodePipeline console
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}
  
  PhotoBucketName:
    Description: Name of the S3 bucket for photos
    Value: !Sub '${AWS::StackName}-photos-${AWS::AccountId}'
  
  WebsiteBucketName:
    Description: Name of the S3 bucket for website hosting
    Value: !Sub '${AWS::StackName}-website-${AWS::AccountId}'
