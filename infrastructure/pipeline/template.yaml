AWSTemplateFormatVersion: '2010-09-09'
Description: 'CI/CD Pipeline for Game Collection App'

Parameters:
  AppName:
    Type: String
    Default: 'game-collection'
    Description: 'Application name used for naming resources'
  
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues:
      - 'dev'
      - 'prod'
    Description: 'Environment (dev or prod)'
  
  RepositoryName:
    Type: String
    Default: 'claude-test'
    Description: 'GitHub repository name'
  
  RepositoryOwner:
    Type: String
    Default: 'Tatsuki-Yamada'
    Description: 'GitHub repository owner'
  
  GitHubOAuthToken:
    Type: String
    NoEcho: true
    Description: 'GitHub OAuth Token for CodePipeline'
  
  Branch:
    Type: String
    Default: 'main'
    Description: 'Repository branch to deploy'

Resources:
  # インラインLambda関数を作成して、CloudFront無効化をバックアップとして提供
  CloudFrontInvalidationFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${AppName}-${Environment}-cf-invalidation'
      Handler: index.lambda_handler
      Runtime: python3.9
      Timeout: 60
      Role: {'Fn::ImportValue': !Sub '${AppName}-${Environment}-LambdaExecutionRoleArn'}
      Code:
        ZipFile: |
          import boto3
          import os
          import time
          import json

          def lambda_handler(event, context):
              try:
                  # CloudFrontクライアントの初期化
                  cloudfront = boto3.client('cloudfront')
                  cloudformation = boto3.client('cloudformation')
                  
                  # CloudFormationスタックから分布IDを取得
                  stack_name = os.environ.get('FRONTEND_STACK_NAME', '')
                  
                  if not stack_name:
                      print("Frontend stack name not provided")
                      return {
                          'statusCode': 400,
                          'body': json.dumps('Frontend stack name not provided')
                      }
                  
                  try:
                      # スタック出力を取得
                      response = cloudformation.describe_stacks(StackName=stack_name)
                      outputs = response['Stacks'][0]['Outputs']
                      
                      # 分布IDを見つける
                      distribution_id = None
                      for output in outputs:
                          if output['OutputKey'] == 'CloudFrontDistributionId':
                              distribution_id = output['OutputValue']
                              break
                      
                      if not distribution_id:
                          print(f"CloudFrontDistributionId not found in stack outputs for {stack_name}")
                          return {
                              'statusCode': 404,
                              'body': json.dumps(f"CloudFrontDistributionId not found in stack outputs for {stack_name}")
                          }
                      
                      # 無効化リクエストを作成
                      invalidation_response = cloudfront.create_invalidation(
                          DistributionId=distribution_id,
                          InvalidationBatch={
                              'Paths': {
                                  'Quantity': 1,
                                  'Items': ['/*']
                              },
                              'CallerReference': f'invalidation-{int(time.time())}'
                          }
                      )
                      
                      print(f"Successfully created invalidation for {distribution_id}")
                      return {
                          'statusCode': 200,
                          'body': json.dumps('Cache invalidation initiated successfully')
                      }
                  except cloudformation.exceptions.ClientError as e:
                      if 'does not exist' in str(e):
                          print(f"Frontend stack {stack_name} does not exist yet")
                          return {
                              'statusCode': 200,
                              'body': json.dumps(f"Frontend stack {stack_name} does not exist yet, skipping invalidation")
                          }
                      else:
                          raise
                  
              except Exception as e:
                  print(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps(f'Error: {str(e)}')
                  }
      Environment:
        Variables:
          FRONTEND_STACK_NAME: !Sub '${AppName}-${Environment}-frontend-infra'

  # CI/CD Pipeline
  GameCollectionPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    DependsOn: CloudFrontInvalidationFunction
    Properties:
      Name: !Sub '${AppName}-${Environment}-pipeline'
      RoleArn: {'Fn::ImportValue': !Sub '${AppName}-${Environment}-CodePipelineServiceRoleArn'}
      ArtifactStore:
        Type: S3
        Location: {'Fn::ImportValue': !Sub '${AppName}-${Environment}-ArtifactsBucketName'}
      Stages:
        # Source Stage
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Owner: !Ref RepositoryOwner
                Repo: !Ref RepositoryName
                Branch: !Ref Branch
                OAuthToken: !Ref GitHubOAuthToken
              OutputArtifacts:
                - Name: SourceCode
        
        # Deploy Lambda for CloudFront Invalidation from source code
        - Name: DeployLambdaFunction
          Actions:
            - Name: DeployCloudFrontInvalidationFunction
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: {'Fn::ImportValue': !Sub '${AppName}-${Environment}-CloudFormationServiceRoleArn'}
                StackName: !Sub '${AppName}-${Environment}-cf-invalidation'
                TemplatePath: 'SourceCode::infrastructure/lambda/cf-invalidation.yaml'
                ParameterOverrides: !Sub |
                  {
                    "AppName": "${AppName}",
                    "Environment": "${Environment}",
                    "LambdaExecutionRoleArn": {"Fn::ImportValue": "${AppName}-${Environment}-LambdaExecutionRoleArn"},
                    "FrontendStackName": "${AppName}-${Environment}-frontend-infra"
                  }
                Capabilities: CAPABILITY_NAMED_IAM
              InputArtifacts:
                - Name: SourceCode
              RunOrder: 1
        
        # Deploy CodeBuild Project for Frontend
        - Name: DeployCodeBuildProject
          Actions:
            - Name: DeployFrontendBuildProject
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: {'Fn::ImportValue': !Sub '${AppName}-${Environment}-CloudFormationServiceRoleArn'}
                StackName: !Sub '${AppName}-${Environment}-frontend-build'
                TemplatePath: 'SourceCode::infrastructure/codebuild/frontend-build.yaml'
                ParameterOverrides: !Sub |
                  {
                    "AppName": "${AppName}",
                    "Environment": "${Environment}",
                    "CodeBuildServiceRoleArn": {"Fn::ImportValue": "${AppName}-${Environment}-CodeBuildServiceRoleArn"}
                  }
                Capabilities: CAPABILITY_NAMED_IAM
              InputArtifacts:
                - Name: SourceCode
              RunOrder: 1
        
        # Deploy Auth Stack
        - Name: DeployAuthStack
          Actions:
            - Name: DeployAuthStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: {'Fn::ImportValue': !Sub '${AppName}-${Environment}-CloudFormationServiceRoleArn'}
                StackName: !Sub '${AppName}-${Environment}-auth'
                TemplatePath: 'SourceCode::infrastructure/auth/template.yaml'
                TemplateConfiguration: 'SourceCode::infrastructure/auth/config.json'
                ParameterOverrides: !Sub |
                  {
                    "AppName": "${AppName}",
                    "Environment": "${Environment}"
                  }
                Capabilities: CAPABILITY_NAMED_IAM
              InputArtifacts:
                - Name: SourceCode
              RunOrder: 1
        
        # Deploy Storage Stack
        - Name: DeployStorageStack
          Actions:
            - Name: DeployStorageStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: {'Fn::ImportValue': !Sub '${AppName}-${Environment}-CloudFormationServiceRoleArn'}
                StackName: !Sub '${AppName}-${Environment}-storage'
                TemplatePath: 'SourceCode::infrastructure/storage/template.yaml'
                ParameterOverrides: !Sub |
                  {
                    "AppName": "${AppName}",
                    "Environment": "${Environment}"
                  }
                Capabilities: CAPABILITY_NAMED_IAM
              InputArtifacts:
                - Name: SourceCode
              RunOrder: 1
        
        # Deploy API Stack
        - Name: DeployAPIStack
          Actions:
            - Name: DeployAPIStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: {'Fn::ImportValue': !Sub '${AppName}-${Environment}-CloudFormationServiceRoleArn'}
                StackName: !Sub '${AppName}-${Environment}-api'
                TemplatePath: 'SourceCode::infrastructure/api/template.yaml'
                ParameterOverrides: !Sub |
                  {
                    "AppName": "${AppName}",
                    "Environment": "${Environment}"
                  }
                Capabilities: CAPABILITY_NAMED_IAM
              InputArtifacts:
                - Name: SourceCode
              RunOrder: 1
              
        # Deploy Frontend Infrastructure Stack
        - Name: DeployFrontendInfraStack
          Actions:
            - Name: DeployFrontendInfraStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: {'Fn::ImportValue': !Sub '${AppName}-${Environment}-CloudFormationServiceRoleArn'}
                StackName: !Sub '${AppName}-${Environment}-frontend-infra'
                TemplatePath: 'SourceCode::infrastructure/frontend/template.yaml'
                ParameterOverrides: !Sub |
                  {
                    "AppName": "${AppName}",
                    "Environment": "${Environment}"
                  }
                Capabilities: CAPABILITY_NAMED_IAM
              InputArtifacts:
                - Name: SourceCode
              RunOrder: 1
        
        # Build Frontend
        - Name: BuildFrontend
          Actions:
            - Name: BuildFrontend
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: {"Fn::ImportValue": !Sub '${AppName}-${Environment}-FrontendBuildProjectName'}
              InputArtifacts:
                - Name: SourceCode
              OutputArtifacts:
                - Name: BuildOutput
        
        # Deploy Frontend
        - Name: DeployFrontend
          Actions:
            - Name: DeployToS3
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                BucketName: {'Fn::ImportValue': !Sub '${AppName}-${Environment}-WebsiteBucketName'}
                Extract: true
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
            
            # CloudFront無効化のLambda実行
            - Name: InvalidateCloudFrontCache
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: '1'
              Configuration:
                FunctionName: !Ref CloudFrontInvalidationFunction
              InputArtifacts:
                - Name: SourceCode
              RunOrder: 2

Outputs:
  PipelineURL:
    Description: 'URL to the CodePipeline console'
    Value: !Sub 'https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${GameCollectionPipeline}'
  
  # CloudFront無効化関数をエクスポート
  CloudFrontInvalidationFunctionName:
    Description: 'Name of the CloudFront invalidation Lambda function'
    Value: !Ref CloudFrontInvalidationFunction
    Export:
      Name: !Sub '${AppName}-${Environment}-CloudFrontInvalidationFunctionName'
  
  CloudFrontInvalidationFunctionArn:
    Description: 'ARN of the CloudFront invalidation Lambda function'
    Value: !GetAtt CloudFrontInvalidationFunction.Arn
    Export:
      Name: !Sub '${AppName}-${Environment}-CloudFrontInvalidationFunctionArn'
