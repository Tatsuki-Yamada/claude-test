AWSTemplateFormatVersion: '2010-09-09'
Description: 'CI/CD Pipeline for Game Collection App'

Parameters:
  AppName:
    Type: String
    Default: 'game-collection'
    Description: 'Application name used for naming resources'
  
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues:
      - 'dev'
      - 'prod'
    Description: 'Environment (dev or prod)'
  
  RepositoryName:
    Type: String
    Default: 'claude-test'
    Description: 'GitHub repository name'
  
  RepositoryOwner:
    Type: String
    Default: 'Tatsuki-Yamada'
    Description: 'GitHub repository owner'
  
  GitHubOAuthToken:
    Type: String
    NoEcho: true
    Description: 'GitHub OAuth Token for CodePipeline'
  
  Branch:
    Type: String
    Default: 'main'
    Description: 'Repository branch to deploy'

Resources:
  # CodePipeline Service Role
  CodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AppName}-${Environment}-pipeline-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSCodeStarFullAccess'
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketVersioning'
                  - 's3:PutObject'
                Resource: 
                  - !GetAtt ArtifactsBucket.Arn
                  - !Sub '${ArtifactsBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - 'cloudformation:CreateStack'
                  - 'cloudformation:DeleteStack'
                  - 'cloudformation:DescribeStacks'
                  - 'cloudformation:UpdateStack'
                  - 'cloudformation:CreateChangeSet'
                  - 'cloudformation:DeleteChangeSet'
                  - 'cloudformation:DescribeChangeSet'
                  - 'cloudformation:ExecuteChangeSet'
                  - 'cloudformation:SetStackPolicy'
                  - 'cloudformation:ValidateTemplate'
                  - 'cloudformation:ListStackResources'
                Resource: !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AppName}-${Environment}-*/*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: '*'
                Condition:
                  StringEqualsIfExists:
                    'iam:PassedToService':
                      - cloudformation.amazonaws.com
                      - codebuild.amazonaws.com

  # CloudFormation Service Role
  CloudFormationServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AppName}-${Environment}-cloudformation-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  # CodePipeline Artifacts Bucket
  ArtifactsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${AppName}-${Environment}-pipeline-artifacts'
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: 30
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 7
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # CI/CD Pipeline
  GameCollectionPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: !Sub '${AppName}-${Environment}-pipeline'
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactsBucket
      Stages:
        # Source Stage
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Owner: !Ref RepositoryOwner
                Repo: !Ref RepositoryName
                Branch: !Ref Branch
                OAuthToken: !Ref GitHubOAuthToken
              OutputArtifacts:
                - Name: SourceCode
        
        # Deploy IAM Resources
        - Name: DeployIAMResources
          Actions:
            - Name: DeployIAMResources
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt CloudFormationServiceRole.Arn
                StackName: !Sub '${AppName}-${Environment}-iam'
                TemplatePath: 'SourceCode::infrastructure/pipeline/templates/iam.yaml'
                ParameterOverrides: !Sub |
                  {
                    "AppName": "${AppName}",
                    "Environment": "${Environment}"
                  }
                Capabilities: CAPABILITY_NAMED_IAM
              InputArtifacts:
                - Name: SourceCode
              RunOrder: 1
        
        # Deploy S3 Resources
        - Name: DeployS3Resources
          Actions:
            - Name: DeployS3Resources
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt CloudFormationServiceRole.Arn
                StackName: !Sub '${AppName}-${Environment}-s3'
                TemplatePath: 'SourceCode::infrastructure/pipeline/templates/s3.yaml'
                ParameterOverrides: !Sub |
                  {
                    "AppName": "${AppName}",
                    "Environment": "${Environment}"
                  }
                Capabilities: CAPABILITY_NAMED_IAM
              InputArtifacts:
                - Name: SourceCode
              RunOrder: 1
        
        # Deploy CodeBuild Resources
        - Name: DeployCodeBuildResources
          Actions:
            - Name: DeployCodeBuildResources
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt CloudFormationServiceRole.Arn
                StackName: !Sub '${AppName}-${Environment}-codebuild'
                TemplatePath: 'SourceCode::infrastructure/pipeline/templates/codebuild.yaml'
                ParameterOverrides: !Sub |
                  {
                    "AppName": "${AppName}",
                    "Environment": "${Environment}",
                    "CodeBuildServiceRoleArn": {"Fn::ImportValue": "${AppName}-${Environment}-CodeBuildServiceRoleArn"}
                  }
                Capabilities: CAPABILITY_NAMED_IAM
              InputArtifacts:
                - Name: SourceCode
              RunOrder: 1
        
        # Deploy Lambda Resources
        - Name: DeployLambdaResources
          Actions:
            - Name: DeployLambdaResources
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt CloudFormationServiceRole.Arn
                StackName: !Sub '${AppName}-${Environment}-lambda'
                TemplatePath: 'SourceCode::infrastructure/pipeline/templates/lambda.yaml'
                ParameterOverrides: !Sub |
                  {
                    "AppName": "${AppName}",
                    "Environment": "${Environment}",
                    "LambdaExecutionRoleArn": {"Fn::ImportValue": "${AppName}-${Environment}-LambdaExecutionRoleArn"},
                    "FrontendStackName": "${AppName}-${Environment}-frontend-infra"
                  }
                Capabilities: CAPABILITY_NAMED_IAM
              InputArtifacts:
                - Name: SourceCode
              RunOrder: 1
        
        # Deploy Auth Stack
        - Name: DeployAuthStack
          Actions:
            - Name: DeployAuthStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt CloudFormationServiceRole.Arn
                StackName: !Sub '${AppName}-${Environment}-auth'
                TemplatePath: 'SourceCode::infrastructure/auth/template.yaml'
                TemplateConfiguration: 'SourceCode::infrastructure/auth/config.json'
                ParameterOverrides: !Sub |
                  {
                    "AppName": "${AppName}",
                    "Environment": "${Environment}"
                  }
                Capabilities: CAPABILITY_NAMED_IAM
              InputArtifacts:
                - Name: SourceCode
              RunOrder: 1
        
        # Deploy Storage Stack
        - Name: DeployStorageStack
          Actions:
            - Name: DeployStorageStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt CloudFormationServiceRole.Arn
                StackName: !Sub '${AppName}-${Environment}-storage'
                TemplatePath: 'SourceCode::infrastructure/storage/template.yaml'
                ParameterOverrides: !Sub |
                  {
                    "AppName": "${AppName}",
                    "Environment": "${Environment}"
                  }
                Capabilities: CAPABILITY_NAMED_IAM
              InputArtifacts:
                - Name: SourceCode
              RunOrder: 1
        
        # Deploy API Stack
        - Name: DeployAPIStack
          Actions:
            - Name: DeployAPIStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt CloudFormationServiceRole.Arn
                StackName: !Sub '${AppName}-${Environment}-api'
                TemplatePath: 'SourceCode::infrastructure/api/template.yaml'
                ParameterOverrides: !Sub |
                  {
                    "AppName": "${AppName}",
                    "Environment": "${Environment}"
                  }
                Capabilities: CAPABILITY_NAMED_IAM
              InputArtifacts:
                - Name: SourceCode
              RunOrder: 1
              
        # Deploy Frontend Infrastructure Stack
        - Name: DeployFrontendInfraStack
          Actions:
            - Name: DeployFrontendInfraStack
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !GetAtt CloudFormationServiceRole.Arn
                StackName: !Sub '${AppName}-${Environment}-frontend-infra'
                TemplatePath: 'SourceCode::infrastructure/frontend/template.yaml'
                ParameterOverrides: !Sub |
                  {
                    "AppName": "${AppName}",
                    "Environment": "${Environment}"
                  }
                Capabilities: CAPABILITY_NAMED_IAM
              InputArtifacts:
                - Name: SourceCode
              RunOrder: 1
        
        # Build Frontend
        - Name: BuildFrontend
          Actions:
            - Name: BuildFrontend
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: {"Fn::ImportValue": !Sub '${AppName}-${Environment}-FrontendBuildProjectName'}
              InputArtifacts:
                - Name: SourceCode
              OutputArtifacts:
                - Name: BuildOutput
        
        # Deploy Frontend
        - Name: DeployFrontend
          Actions:
            - Name: DeployToS3
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                BucketName: {"Fn::ImportValue": !Sub '${AppName}-${Environment}-WebsiteBucketName'}
                Extract: true
              InputArtifacts:
                - Name: BuildOutput
            
            - Name: InvalidateCloudFrontCache
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: '1'
              Configuration:
                FunctionName: {"Fn::ImportValue": !Sub '${AppName}-${Environment}-CloudFrontInvalidationFunctionName'}
              InputArtifacts:
                - Name: SourceCode
              RunOrder: 2

Outputs:
  PipelineURL:
    Description: 'URL to the CodePipeline console'
    Value: !Sub 'https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${GameCollectionPipeline}'
  
  ArtifactsBucketName:
    Description: 'Name of the S3 bucket for pipeline artifacts'
    Value: !Ref ArtifactsBucket
    Export:
      Name: !Sub '${AppName}-${Environment}-ArtifactsBucketName'
