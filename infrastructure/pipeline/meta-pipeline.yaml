AWSTemplateFormatVersion: '2010-09-09'
Description: 'Meta Pipeline for S3 Photo Gallery - Updates Main Pipeline Automatically'

Parameters:
  GitHubOwner:
    Type: String
    Default: Tatsuki-Yamada
    Description: GitHub repository owner
  
  GitHubRepo:
    Type: String
    Default: claude-test
    Description: GitHub repository name
  
  GitHubBranch:
    Type: String
    Default: main
    Description: GitHub repository branch
  
  GitHubToken:
    Type: String
    NoEcho: true
    Description: GitHub OAuth token
  
  MainStackName:
    Type: String
    Default: s3-photo-gallery
    Description: Name of the main pipeline stack
  
  PrerequisitesStackName:
    Type: String
    Default: s3-photo-gallery-prerequisites
    Description: Name of the prerequisite resources CloudFormation stack

Resources:
  # CloudWatch Events用のLambda関数
  TriggerMainPipelineLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${MainStackName}-trigger-main-pipeline'
      Handler: index.handler
      Role: !GetAtt TriggerMainPipelineLambdaRole.Arn
      Runtime: nodejs16.x
      Timeout: 30
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          
          exports.handler = async (event) => {
            console.log('Event:', JSON.stringify(event, null, 2));
            
            // メインパイプライン名を取得
            const mainPipelineName = process.env.MAIN_PIPELINE_NAME;
            console.log(`Main pipeline name: ${mainPipelineName}`);
            
            // CodePipelineクライアントを初期化
            const codepipeline = new AWS.CodePipeline();
            
            try {
              // メインパイプラインを実行
              const params = {
                name: mainPipelineName
              };
              
              console.log(`Starting pipeline execution for: ${mainPipelineName}`);
              const result = await codepipeline.startPipelineExecution(params).promise();
              console.log('Pipeline started successfully:', result);
              
              return {
                statusCode: 200,
                body: JSON.stringify('Main pipeline triggered successfully')
              };
            } catch (error) {
              console.error('Error triggering pipeline:', error);
              // エラーが発生しても成功として処理（失敗しても継続）
              return {
                statusCode: 200,
                body: JSON.stringify(`Note: Could not trigger pipeline: ${error.message}`)
              };
            }
          }
      Environment:
        Variables:
          MAIN_PIPELINE_NAME: !Sub '${MainStackName}-pipeline'

  # Lambda関数用のIAMロール
  TriggerMainPipelineLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CodePipelineStartExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${MainStackName}-pipeline'

  # CloudWatch event to detect changes in the infrastructure/pipeline directory
  PipelineChangeDetector:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${MainStackName}-pipeline-change-detector'
      Description: 'Detect changes in the pipeline directory and trigger the meta-pipeline'
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - 'CodeCommit Repository State Change'
        resources:
          - !Sub 'arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${GitHubRepo}'
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - !Ref GitHubBranch
      State: ENABLED
      Targets:
        - Arn: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${MetaPipeline}'
          Id: TriggerMetaPipeline
          RoleArn: 
            Fn::ImportValue: !Sub '${PrerequisitesStackName}-CloudWatchEventsServiceRoleArn'

  # CloudFormationイベントフックルール
  CloudFormationHook:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${MainStackName}-cloudformation-hook'
      Description: 'Detect when the main pipeline stack is updated and trigger the main pipeline'
      EventPattern:
        source:
          - aws.cloudformation
        detail-type:
          - 'CloudFormation Stack Status Change'
        detail:
          stack-id:
            - !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${MainStackName}/*'
          status-details:
            status:
              - UPDATE_COMPLETE
              - CREATE_COMPLETE
      State: ENABLED
      Targets:
        - Arn: !GetAtt TriggerMainPipelineLambda.Arn
          Id: TriggerMainPipelineLambda

  # Lambda関数へのCloudWatch Eventsの許可
  CloudFormationHookLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TriggerMainPipelineLambda
      Principal: events.amazonaws.com
      SourceArn: !GetAtt CloudFormationHook.Arn

  MetaPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub '${MainStackName}-meta-pipeline'
      RoleArn: 
        Fn::ImportValue: !Sub '${PrerequisitesStackName}-CodePipelineServiceRoleArn'
      ArtifactStore:
        Type: S3
        Location: 
          Fn::ImportValue: !Sub '${PrerequisitesStackName}-ArtifactBucketName'
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: SourceCode
        
        - Name: UpdatePipeline
          Actions:
            - Name: UpdateMainPipeline
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: 
                  Fn::ImportValue: !Sub '${PrerequisitesStackName}-CloudFormationServiceRoleArn'
                StackName: !Ref MainStackName
                TemplatePath: SourceCode::infrastructure/pipeline/main-pipeline.yaml
                Capabilities: CAPABILITY_NAMED_IAM
                ParameterOverrides: !Sub |
                  {
                    "GitHubOwner": "${GitHubOwner}",
                    "GitHubRepo": "${GitHubRepo}",
                    "GitHubBranch": "${GitHubBranch}",
                    "GitHubToken": "${GitHubToken}",
                    "PrerequisitesStackName": "${PrerequisitesStackName}"
                  }
              InputArtifacts:
                - Name: SourceCode

Outputs:
  MetaPipelineUrl:
    Description: URL to the Meta Pipeline console
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${MetaPipeline}
  
  AutomationDetails:
    Description: Automation workflow details
    Value: !Sub "When the ${MainStackName} stack is updated, a CloudWatch Event automatically triggers the main pipeline."
