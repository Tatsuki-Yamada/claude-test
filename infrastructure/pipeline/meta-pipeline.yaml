AWSTemplateFormatVersion: '2010-09-09'
Description: 'Meta Pipeline for S3 Photo Gallery - Updates Main Pipeline Automatically'

Parameters:
  GitHubOwner:
    Type: String
    Default: Tatsuki-Yamada
    Description: GitHub repository owner
  
  GitHubRepo:
    Type: String
    Default: claude-test
    Description: GitHub repository name
  
  GitHubBranch:
    Type: String
    Default: main
    Description: GitHub repository branch
  
  GitHubToken:
    Type: String
    NoEcho: true
    Description: GitHub OAuth token
  
  MainStackName:
    Type: String
    Default: s3-photo-gallery
    Description: Name of the main pipeline stack
  
  PrerequisitesStackName:
    Type: String
    Default: s3-photo-gallery-prerequisites
    Description: Name of the prerequisite resources CloudFormation stack

Resources:
  # Lambda関数を使用してメインパイプラインを呼び出し
  TriggerMainPipelineLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${MainStackName}-trigger-lambda'
      Handler: index.handler
      Role: !GetAtt TriggerMainPipelineLambdaRole.Arn
      Runtime: nodejs16.x
      Timeout: 30
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const codepipeline = new AWS.CodePipeline();
          const response = require('cfn-response');
          
          exports.handler = async (event, context) => {
            console.log('Event:', JSON.stringify(event, null, 2));
            
            // CloudFormationカスタムリソースの場合のみ処理
            if (event.RequestType === 'Create' || event.RequestType === 'Update') {
              try {
                const pipelineName = process.env.MAIN_PIPELINE_NAME;
                console.log(`Starting pipeline: ${pipelineName}`);
                
                const result = await codepipeline.startPipelineExecution({
                  name: pipelineName
                }).promise();
                
                console.log('Pipeline started:', result);
                await response.send(event, context, response.SUCCESS, {}, 'PipelineTrigger');
              } catch (error) {
                console.error('Error:', error);
                // エラーでも成功として応答（失敗しても続行するため）
                await response.send(event, context, response.SUCCESS, {}, 'PipelineTrigger');
              }
            } else if (event.RequestType === 'Delete') {
              // Delete時は何もしない
              await response.send(event, context, response.SUCCESS, {}, 'PipelineTrigger');
            }
          };
      Environment:
        Variables:
          MAIN_PIPELINE_NAME: !Sub '${MainStackName}-pipeline'

  # Lambda用のIAMロール
  TriggerMainPipelineLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CodePipelineStartExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${MainStackName}-pipeline'

  # メインパイプラインを実行するためのカスタムリソース
  TriggerMainPipelineCustomResource:
    Type: Custom::TriggerMainPipeline
    Properties:
      ServiceToken: !GetAtt TriggerMainPipelineLambda.Arn
      # この値を変更すると、パイプライン更新後に必ずトリガーされる
      UpdateTimestamp: !Ref AWS::StackName

  # CloudWatch event to detect changes in the infrastructure/pipeline directory
  PipelineChangeDetector:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub '${MainStackName}-pipeline-change-detector'
      Description: 'Detect changes in the pipeline directory and trigger the meta-pipeline'
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - 'CodeCommit Repository State Change'
        resources:
          - !Sub 'arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${GitHubRepo}'
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - !Ref GitHubBranch
      State: ENABLED
      Targets:
        - Arn: !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${MetaPipeline}'
          Id: TriggerMetaPipeline
          RoleArn: 
            Fn::ImportValue: !Sub '${PrerequisitesStackName}-CloudWatchEventsServiceRoleArn'

  MetaPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub '${MainStackName}-meta-pipeline'
      RoleArn: 
        Fn::ImportValue: !Sub '${PrerequisitesStackName}-CodePipelineServiceRoleArn'
      ArtifactStore:
        Type: S3
        Location: 
          Fn::ImportValue: !Sub '${PrerequisitesStackName}-ArtifactBucketName'
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: SourceCode
        
        - Name: UpdatePipeline
          Actions:
            - Name: UpdateMainPipeline
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: 
                  Fn::ImportValue: !Sub '${PrerequisitesStackName}-CloudFormationServiceRoleArn'
                StackName: !Ref MainStackName
                TemplatePath: SourceCode::infrastructure/pipeline/main-pipeline.yaml
                Capabilities: CAPABILITY_NAMED_IAM
                ParameterOverrides: !Sub |
                  {
                    "GitHubOwner": "${GitHubOwner}",
                    "GitHubRepo": "${GitHubRepo}",
                    "GitHubBranch": "${GitHubBranch}",
                    "GitHubToken": "${GitHubToken}",
                    "PrerequisitesStackName": "${PrerequisitesStackName}"
                  }
              InputArtifacts:
                - Name: SourceCode

Outputs:
  MetaPipelineUrl:
    Description: URL to the Meta Pipeline console
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${MetaPipeline}
  
  AutomationDetails:
    Description: Automation workflow details
    Value: "When the meta-pipeline completes, a Lambda function will automatically trigger the main pipeline."
