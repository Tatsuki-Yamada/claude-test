AWSTemplateFormatVersion: '2010-09-09'
Description: 'API resources for Game Collection App'

Parameters:
  AppName:
    Type: String
    Default: 'game-collection'
    Description: 'Application name used for naming resources'
  
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues:
      - 'dev'
      - 'prod'
    Description: 'Environment (dev or prod)'
  
  LambdaMemorySize:
    Type: Number
    Default: 128
    Description: 'Memory size for Lambda functions (MB)'
  
  LambdaTimeout:
    Type: Number
    Default: 10
    Description: 'Timeout for Lambda functions (seconds)'

Resources:
  # Lambda Execution Role
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: 'GameCollectionLambdaPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                Resource: 
                  - Fn::ImportValue: !Sub '${AppName}-${Environment}-GamesTableArn'
                  - !Join ['', [Fn::ImportValue: !Sub '${AppName}-${Environment}-GamesTableArn', '/index/*']]
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                Resource: !Join ['', [Fn::ImportValue: !Sub '${AppName}-${Environment}-ThumbnailsBucketArn', '/*']]

  # Lambda Functions
  GetGamesFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${AppName}-${Environment}-get-games'
      Description: 'Get games for a user'
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs18.x
      MemorySize: !Ref LambdaMemorySize
      Timeout: !Ref LambdaTimeout
      Environment:
        Variables:
          TABLE_NAME: 
            Fn::ImportValue: !Sub '${AppName}-${Environment}-GamesTableName'
          THUMBNAILS_BUCKET: 
            Fn::ImportValue: !Sub '${AppName}-${Environment}-ThumbnailsBucketName'
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('Get Games Function:', JSON.stringify(event));
            return {
              statusCode: 200,
              headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
              },
              body: JSON.stringify({ message: 'Get games function placeholder' })
            };
          };

  CreateGameFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${AppName}-${Environment}-create-game'
      Description: 'Create a new game'
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs18.x
      MemorySize: !Ref LambdaMemorySize
      Timeout: !Ref LambdaTimeout
      Environment:
        Variables:
          TABLE_NAME: 
            Fn::ImportValue: !Sub '${AppName}-${Environment}-GamesTableName'
          THUMBNAILS_BUCKET: 
            Fn::ImportValue: !Sub '${AppName}-${Environment}-ThumbnailsBucketName'
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('Create Game Function:', JSON.stringify(event));
            return {
              statusCode: 200,
              headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
              },
              body: JSON.stringify({ message: 'Create game function placeholder' })
            };
          };

  UpdateGameFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${AppName}-${Environment}-update-game'
      Description: 'Update an existing game'
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs18.x
      MemorySize: !Ref LambdaMemorySize
      Timeout: !Ref LambdaTimeout
      Environment:
        Variables:
          TABLE_NAME: 
            Fn::ImportValue: !Sub '${AppName}-${Environment}-GamesTableName'
          THUMBNAILS_BUCKET: 
            Fn::ImportValue: !Sub '${AppName}-${Environment}-ThumbnailsBucketName'
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('Update Game Function:', JSON.stringify(event));
            return {
              statusCode: 200,
              headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
              },
              body: JSON.stringify({ message: 'Update game function placeholder' })
            };
          };
  
  DeleteGameFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${AppName}-${Environment}-delete-game'
      Description: 'Delete a game'
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs18.x
      MemorySize: !Ref LambdaMemorySize
      Timeout: !Ref LambdaTimeout
      Environment:
        Variables:
          TABLE_NAME: 
            Fn::ImportValue: !Sub '${AppName}-${Environment}-GamesTableName'
          THUMBNAILS_BUCKET: 
            Fn::ImportValue: !Sub '${AppName}-${Environment}-ThumbnailsBucketName'
      Code:
        ZipFile: |
          exports.handler = async (event) => {
            console.log('Delete Game Function:', JSON.stringify(event));
            return {
              statusCode: 200,
              headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
              },
              body: JSON.stringify({ message: 'Delete game function placeholder' })
            };
          };

  # API Gateway
  ApiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub '${AppName}-${Environment}-api'
      Description: 'API for Game Collection App'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Resources
  GamesResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'games'

  GameResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref GamesResource
      PathPart: '{gameId}'

  # API Methods
  GetGamesMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetGamesFunction.Arn}/invocations'
      ResourceId: !Ref GamesResource
      RestApiId: !Ref ApiGateway

  CreateGameMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateGameFunction.Arn}/invocations'
      ResourceId: !Ref GamesResource
      RestApiId: !Ref ApiGateway

  UpdateGameMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      HttpMethod: PUT
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateGameFunction.Arn}/invocations'
      ResourceId: !Ref GameResource
      RestApiId: !Ref ApiGateway

  DeleteGameMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      HttpMethod: DELETE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteGameFunction.Arn}/invocations'
      ResourceId: !Ref GameResource
      RestApiId: !Ref ApiGateway

  # API Authorizer
  ApiAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Properties:
      Name: !Sub '${AppName}-${Environment}-authorizer'
      RestApiId: !Ref ApiGateway
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - Fn::ImportValue: !Sub '${AppName}-${Environment}-UserPoolArn'

  # Lambda Permissions
  GetGamesPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref GetGamesFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/games'

  CreateGamePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref CreateGameFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/games'

  UpdateGamePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref UpdateGameFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/PUT/games/{gameId}'

  DeleteGamePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref DeleteGameFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/DELETE/games/{gameId}'

  # API Deployment
  ApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - GetGamesMethod
      - CreateGameMethod
      - UpdateGameMethod
      - DeleteGameMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

Outputs:
  ApiGatewayId:
    Description: 'ID of the API Gateway'
    Value: !Ref ApiGateway
    Export:
      Name: !Sub '${AppName}-${Environment}-ApiGatewayId'
  
  ApiGatewayUrl:
    Description: 'URL of the API Gateway'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AppName}-${Environment}-ApiGatewayUrl'
  
  GetGamesFunction:
    Description: 'ARN of the Get Games Lambda Function'
    Value: !GetAtt GetGamesFunction.Arn
    Export:
      Name: !Sub '${AppName}-${Environment}-GetGamesFunction'
  
  CreateGameFunction:
    Description: 'ARN of the Create Game Lambda Function'
    Value: !GetAtt CreateGameFunction.Arn
    Export:
      Name: !Sub '${AppName}-${Environment}-CreateGameFunction'
  
  UpdateGameFunction:
    Description: 'ARN of the Update Game Lambda Function'
    Value: !GetAtt UpdateGameFunction.Arn
    Export:
      Name: !Sub '${AppName}-${Environment}-UpdateGameFunction'
  
  DeleteGameFunction:
    Description: 'ARN of the Delete Game Lambda Function'
    Value: !GetAtt DeleteGameFunction.Arn
    Export:
      Name: !Sub '${AppName}-${Environment}-DeleteGameFunction'
