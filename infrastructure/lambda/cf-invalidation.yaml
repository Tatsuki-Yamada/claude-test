AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFront Cache Invalidation Lambda for Game Collection App'

Parameters:
  AppName:
    Type: String
    Description: 'Application name used for naming resources'
  
  Environment:
    Type: String
    Description: 'Environment (dev or prod)'
  
  LambdaExecutionRoleArn:
    Type: String
    Description: 'ARN of the Lambda execution role'
  
  FrontendStackName:
    Type: String
    Default: ''
    Description: 'Name of the CloudFront stack'

Resources:
  # Lambda Function for CloudFront Cache Invalidation
  CloudFrontInvalidationFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${AppName}-${Environment}-cf-invalidation'
      Handler: index.lambda_handler
      Runtime: python3.9
      Timeout: 60
      Role: !Ref LambdaExecutionRoleArn
      Code:
        ZipFile: |
          import boto3
          import os
          import time
          import json

          def lambda_handler(event, context):
              # Initialize AWS clients
              cloudfront = boto3.client('cloudfront')
              cloudformation = boto3.client('cloudformation')
              
              # Get CloudFront distribution ID from CloudFormation stack outputs
              stack_name = os.environ['FRONTEND_STACK_NAME']
              
              try:
                  # Get stack outputs
                  response = cloudformation.describe_stacks(StackName=stack_name)
                  outputs = response['Stacks'][0]['Outputs']
                  
                  # Find the distribution ID
                  distribution_id = None
                  for output in outputs:
                      if output['OutputKey'] == 'CloudFrontDistributionId':
                          distribution_id = output['OutputValue']
                          break
                  
                  if not distribution_id:
                      raise Exception(f"CloudFrontDistributionId not found in stack outputs for {stack_name}")
                  
                  # Create invalidation request
                  invalidation_response = cloudfront.create_invalidation(
                      DistributionId=distribution_id,
                      InvalidationBatch={
                          'Paths': {
                              'Quantity': 1,
                              'Items': ['/*']
                          },
                          'CallerReference': f'invalidation-{int(time.time())}'
                      }
                  )
                  
                  print(f"Successfully created invalidation for {distribution_id}")
                  return {
                      'statusCode': 200,
                      'body': json.dumps('Cache invalidation initiated successfully')
                  }
                  
              except Exception as e:
                  print(f"Error: {str(e)}")
                  raise e
      Environment:
        Variables:
          FRONTEND_STACK_NAME: !Ref FrontendStackName

Outputs:
  CloudFrontInvalidationFunctionName:
    Description: 'Name of the CloudFront invalidation Lambda function'
    Value: !Ref CloudFrontInvalidationFunction
    Export:
      Name: !Sub '${AppName}-${Environment}-CloudFrontInvalidationFunctionName'
  
  CloudFrontInvalidationFunctionArn:
    Description: 'ARN of the CloudFront invalidation Lambda function'
    Value: !GetAtt CloudFrontInvalidationFunction.Arn
    Export:
      Name: !Sub '${AppName}-${Environment}-CloudFrontInvalidationFunctionArn'
